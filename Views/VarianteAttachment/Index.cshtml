@using PIPMUNI_ARG.Models.Domain;
@model IEnumerable<PIPMUNI_ARG.Models.Domain.VarianteAttachment>?
@{
    ViewData["Title"] = "Anexo Variantes";
    ViewBag.WorkingInContract = true;
}



<form asp-action="Index" asp-controller="VarianteAttachment" method="get" asp-route-returnUrl="@ViewBag.returnUrl" asp-route-bufferedUrl="@ViewBag.bufferedUrl" >

    <!-- Search -->
    <div class="row mb-4">
        @if ((Model?.Count() > ProjectGlobals.maxRowsBeforeSearch) || (!string.IsNullOrEmpty(@ViewBag.searchText)))
        {
            <div class="col-xl-3 col-lg-2 col-md-1">
            </div>
            <div class="col-xl-9 col-lg-10 col-md-11 col-sm-12">
                <div class="input-group">
                    <input name="searchText" type="search" value="@ViewBag.searchText" class="form-control" />
                   <button type="submit" class="btn btn-outline-secondary"><i class="bi-search"></i><span class="screenOnly">&nbsp; Buscar</span></button>
                </div>
            </div>
        }
    </div>

    <a asp-area="" asp-controller="VarianteAttachment"  asp-action="Create" asp-route-varianteId=@ViewBag.varianteId class="btn btn-clear float-end" asp-route-bufferedUrl=@ViewBag.returnUrl><i class="bi-plus"></i> Crear  Anexo Variante</a>

    <!-- select table -->
    <table class="table select-table">
        <thead>
            <tr>
                <th>
                    <a href=@Url.Action("Index", "VarianteAttachment", new { sortOrder = @ViewBag.titleSort})>
                        @Html.DisplayNameForInnerType((VarianteAttachment s) => s.Title) <i class=@ViewBag.titleIcon></i>
                    </a>
                </th>
                <th>
                    Descargar
                </th>
                <th>
                    <a href=@Url.Action("Index", "VarianteAttachment", new { sortOrder = @ViewBag.dateAttachedSort})>
                        @Html.DisplayNameForInnerType((VarianteAttachment s) => s.DateAttached) <i class=@ViewBag.dateAttachedIcon></i>
                    </a>
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (Model?.Count() > 0)
            {
                @foreach (var varianteAttachment in Model)
                {
                    <tr>
                        <td class="sel-row">
                            <a asp-action="Edit" asp-route-id="@varianteAttachment.Id" asp-route-varianteId=@ViewBag.varianteId asp-route-bufferedUrl=@ViewBag.returnUrl>
                                @Html.DisplayFor(modelItem => varianteAttachment.Title)
                            </a>
                        </td>
                        <td class="sel-row">
                            <a asp-area="" asp-controller="VarianteAttachment" asp-action="Download" asp-route-serverFileName="@varianteAttachment.FileName" asp-route-downloadName="@varianteAttachment.Title" asp-route-varianteId=@ViewBag.varianteId class="btn btn-link">
                                <i class="bi-download"></i>
                            </a>
                        </td>
                        <td class="sel-row">
                            <a asp-action="Edit" asp-route-id="@varianteAttachment.Id" asp-route-varianteId=@ViewBag.varianteId asp-route-bufferedUrl=@ViewBag.returnUrl>
                                @Html.DisplayFor(modelItem => varianteAttachment.DateAttached)
                            </a>
                        </td>
                        <td class="sel-row">
                            <a asp-action="Edit" asp-route-id="@varianteAttachment.Id" asp-route-varianteId=@ViewBag.varianteId asp-route-bufferedUrl=@ViewBag.returnUrl class="btn nav-link">
                                <i class="bi-pencil"></i>
                            </a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

</form>
@{
    <!-- return button -->
    if (!string.IsNullOrEmpty(ViewBag.returnUrl))
    {
        string returnlink = @ViewBag.returnUrl;
        if (!string.IsNullOrEmpty(ViewBag.bufferedUrl))
        {
            if (!returnlink.Contains("returnUrl"))
            {
                string separator = (returnlink.Contains('?')) ? "&" : "?";
                returnlink += string.Format("{0}returnUrl={1}", separator, ViewBag.bufferedUrl);
            }
        }
        <a href=@returnlink formnovalidate class="btn btn-basic"><i class="bi-arrow-90deg-left"></i>&nbsp; Regresar</a>
    }
}

@await Html.PartialAsync("/Views/Shared/JaosLib/_ResultMessages.cshtml",ViewData)
